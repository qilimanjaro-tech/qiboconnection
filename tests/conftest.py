""" Pytest configuration fixtures for each session """

import json
from dataclasses import asdict
from unittest.mock import patch

import pytest
import websockets
from requests import Response

from qiboconnection.api import API
from qiboconnection.connection import Connection
from qiboconnection.typings.connection import (
    ConnectionConfiguration,
    ConnectionEstablished,
)


@pytest.fixture(scope="session", name="mocked_connection_configuration")
def fixture_create_mocked_connection_configuration() -> ConnectionConfiguration:
    """Create a mock connection configuration"""
    return ConnectionConfiguration(user_id=666, username="mocked_user", api_key="betterNOTaskMockedAPIKey")


@pytest.fixture(scope="session", name="mocked_connection_established")
def fixture_create_mocked_connection_established(
    mocked_connection_configuration: ConnectionConfiguration,
) -> ConnectionEstablished:
    """Create a mock connection configuration"""
    return ConnectionEstablished(
        **asdict(mocked_connection_configuration),
        authorisation_access_token="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3O"
        + "DkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c",
        authorisation_refresh_token="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3O"
        + "DkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c",
        api_path="/api/v1",
    )


def _create_mocked_connection(mocked_connection_established: ConnectionEstablished) -> Connection:
    """Create a mocked connection
    Returns:
        Connection: mocked connection
    """
    with patch(
        "qiboconnection.connection.load_config_file_to_disk",
        autospec=True,
        return_value=mocked_connection_established,
    ) as mock_config:
        connection = Connection(api_path="/mocked")
        mock_config.assert_called()
        return connection


@pytest.fixture(scope="session", name="mocked_connection")
def fixture_create_mocked_connection(mocked_connection_established: ConnectionEstablished) -> Connection:
    """Fixture for creating a mocked connection
    Returns:
        Connection: mocked connection
    """
    return _create_mocked_connection(mocked_connection_established=mocked_connection_established)


@pytest.fixture(scope="session", name="mocked_connection_no_user")
def fixture_create_mocked_connection_with_no_user(mocked_connection_established: ConnectionEstablished) -> Connection:
    """Create a mocked connection with a None user
    Returns:
        Connection: mocked connection
    """
    mocked_connection = _create_mocked_connection(mocked_connection_established=mocked_connection_established)
    mocked_connection._user = None
    return mocked_connection


@pytest.fixture(scope="session", name="mocked_api")
def fixture_create_mocked_api_connection(mocked_connection_established: ConnectionEstablished) -> API:
    """Create a mocked api connection
    Returns:
        API: API mocked connection
    """
    with patch(
        "qiboconnection.connection.load_config_file_to_disk",
        autospec=True,
        return_value=mocked_connection_established,
    ) as mock_config:
        api = API()
        mock_config.assert_called()
        return api


@pytest.fixture(name="response")
def fixture_response() -> Response:
    """Creates an status_code 200 Response object with demo values

    Returns:
        Response: response object
    """
    response = Response()
    response.status_code = 200
    response.url = "server/api"
    response._content = json.dumps({"DEMO": "200"}).encode("utf8")
    return response


@pytest.fixture(name="connection_established")
def fixture_connection_established() -> ConnectionEstablished:
    """Creates a ConnectionEstablished object with demo values

    Returns:
        ConnectionEstablished: ConnectionEstablished instance
    """
    return ConnectionEstablished(
        api_key="DEMO_KEY",
        api_path="DEMO_PATH",
        authorisation_access_token="DEMO_TOKEN",
        authorisation_refresh_token="DEMO_TOKEN",
        username="DEMO_USERNAME",
    )


@pytest.fixture(name="base64_qibo_circuit")
def base64_qibo_circuit():
    """qibo circuit base64 encoding"""
    return "Ly8gR2VuZXJhdGVkIGJ5IFFJQk8gMC4xLjEyLmRldjAKT1BFTlFBU00gMi4wOwppbmNsdWRlICJxZWxpYjEuaW5jIjsKcXJlZyBxWzFdOwpjcmVnIHJlZ2lzdGVyMFsxXTsKaCBxWzBdOwptZWFzdXJlIHFbMF0gLT4gcmVnaXN0ZXIwWzBdOw=="


@pytest.fixture(name="base64_qililab_experiment")
def base64_qililab_experiment():
    """qiililab experiment base64 encoding"""
    return ""
