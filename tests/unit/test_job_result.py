""" Tests methods for job result """
import numpy as np

from qiboconnection.models.job_result import JobResult
from qiboconnection.typings.enums import JobType


def test_job_result_creation():
    """Test job result creation"""
    job_result = JobResult(
        job_id=1,
        http_response="gASVsAAAAAAAAACMFW51bXB5LmNvcmUubXVsdGlhcnJheZSMDF9yZWNvbnN0cnVjdJSTlIwFbnVtcHmUjAduZGFycmF5lJOUSwCFlEMBYpSHlFKUKEsBSwWFlGgDjAVkdHlwZZSTlIwCZjiUiYiHlFKUKEsDjAE8lE5OTkr_____Sv____9LAHSUYolDKAAAAAAAAPA_AAAAAAAA8D8AAAAAAADwPwAAAAAAAPA_AAAAAAAA8D-UdJRiLg==",
        job_type=JobType.CIRCUIT,
    )

    assert isinstance(job_result, JobResult)
    assert job_result.job_id == 1
    assert (
        job_result.http_response
        == "gASVsAAAAAAAAACMFW51bXB5LmNvcmUubXVsdGlhcnJheZSMDF9yZWNvbnN0cnVjdJSTlIwFbnVtcHmUjAduZGFycmF5lJOUSwCFlEMBYpSHlFKUKEsBSwWFlGgDjAVkdHlwZZSTlIwCZjiUiYiHlFKUKEsDjAE8lE5OTkr_____Sv____9LAHSUYolDKAAAAAAAAPA_AAAAAAAA8D8AAAAAAADwPwAAAAAAAPA_AAAAAAAA8D-UdJRiLg=="
    )
    assert (job_result.data == np.array([1.0, 1.0, 1.0, 1.0, 1.0])).all()


def test_job_result_qprogram_works():
    """Test QProgrom results are returned as dicts"""

    job_result = JobResult(
        job_id=0,
        http_response="eyJ0eXBlIjogIlFQcm9ncmFtIiwgImF0dHJpYnV0ZXMiOiB7Il9ib2R5IjogeyJ0eXBlIjogIkJsb2NrIiwgImF0dHJpYnV0ZXMiOiB7Il91dWlkIjogeyJ0eXBlIjogIlVVSUQiLCAidXVpZCI6ICI2YmNlYjQ1MS0wZWUxLTQ1N2MtYTE1Ny1iMmYyZDUzOGZmYjUifSwgImVsZW1lbnRzIjogeyJ0eXBlIjogImxpc3QiLCAiZWxlbWVudHMiOiBbeyJ0eXBlIjogIkF2ZXJhZ2UiLCAiYXR0cmlidXRlcyI6IHsiX3V1aWQiOiB7InR5cGUiOiAiVVVJRCIsICJ1dWlkIjogIjIwM2MzY2U2LTVjNzktNGQwZS1iMzYzLTgyZDQ4NDgwYWI5OCJ9LCAiZWxlbWVudHMiOiB7InR5cGUiOiAibGlzdCIsICJlbGVtZW50cyI6IFt7InR5cGUiOiAiRm9yTG9vcCIsICJhdHRyaWJ1dGVzIjogeyJfdXVpZCI6IHsidHlwZSI6ICJVVUlEIiwgInV1aWQiOiAiYzhkNjYzMzgtYzU0OS00MjcwLWI0NjAtNjA4NmE0OTE0ODMzIn0sICJlbGVtZW50cyI6IHsidHlwZSI6ICJsaXN0IiwgImVsZW1lbnRzIjogW3sidHlwZSI6ICJTZXRHYWluIiwgImF0dHJpYnV0ZXMiOiB7Il91dWlkIjogeyJ0eXBlIjogIlVVSUQiLCAidXVpZCI6ICJmZGFkMjAwOC1iODViLTRiYjYtYjIwYi1jZjQ2NmQxZGFlNTgifSwgImJ1cyI6ICJkcml2ZV9xMF9idXMiLCAiZ2FpbiI6IHsidHlwZSI6ICJGbG9hdFZhcmlhYmxlIiwgImF0dHJpYnV0ZXMiOiB7Il91dWlkIjogeyJ0eXBlIjogIlVVSUQiLCAidXVpZCI6ICI2MzVkZjdjYS1jZTM4LTRkNjItOWZlZC03ZjFjYmFmNzFlNzkifSwgIl9zb3VyY2UiOiB7InR5cGUiOiAiVmFsdWVTb3VyY2UiLCAiYXR0cmlidXRlcyI6IHsidmFsdWUiOiAiRnJlZSJ9fSwgIl92YWx1ZSI6IG51bGwsICJfZG9tYWluIjogeyJ0eXBlIjogIkRvbWFpbiIsICJhdHRyaWJ1dGVzIjogeyJ2YWx1ZSI6ICJWb2x0YWdlIn19fX19fSwgeyJ0eXBlIjogIlBsYXkiLCAiYXR0cmlidXRlcyI6IHsiX3V1aWQiOiB7InR5cGUiOiAiVVVJRCIsICJ1dWlkIjogImFiY2FjZDExLWU0YWEtNDI5Yi1iNjNjLTNhMjUwOWJjYTE3ZiJ9LCAiYnVzIjogImRyaXZlX3EwX2J1cyIsICJ3YXZlZm9ybSI6IHsidHlwZSI6ICJJUVBhaXIiLCAiYXR0cmlidXRlcyI6IHsiSSI6IHsidHlwZSI6ICJHYXVzc2lhbiIsICJhdHRyaWJ1dGVzIjogeyJhbXBsaXR1ZGUiOiAxLjAsICJkdXJhdGlvbiI6IDQwLCAibnVtX3NpZ21hcyI6IDQuNX19LCAiUSI6IHsidHlwZSI6ICJEcmFnQ29ycmVjdGlvbiIsICJhdHRyaWJ1dGVzIjogeyJkcmFnX2NvZWZmaWNpZW50IjogLTIuMCwgIndhdmVmb3JtIjogeyJ0eXBlIjogIkdhdXNzaWFuIiwgImF0dHJpYnV0ZXMiOiB7ImFtcGxpdHVkZSI6IDEuMCwgImR1cmF0aW9uIjogNDAsICJudW1fc2lnbWFzIjogNC41fX19fX19LCAid2FpdF90aW1lIjogbnVsbH19LCB7InR5cGUiOiAiU3luYyIsICJhdHRyaWJ1dGVzIjogeyJfdXVpZCI6IHsidHlwZSI6ICJVVUlEIiwgInV1aWQiOiAiOWRhZDJhYzYtYzk1OC00Y2Q5LTg1MzItMmMyMzJhNTJkMzg3In0sICJidXNlcyI6IG51bGx9fSwgeyJ0eXBlIjogIlBsYXkiLCAiYXR0cmlidXRlcyI6IHsiX3V1aWQiOiB7InR5cGUiOiAiVVVJRCIsICJ1dWlkIjogIjRlMmEzYTc1LWJkYzEtNDEzZi04ZDg1LTY3MDM5NThkMzg3NSJ9LCAiYnVzIjogInJlYWRvdXRfcTBfYnVzIiwgIndhdmVmb3JtIjogeyJ0eXBlIjogIklRUGFpciIsICJhdHRyaWJ1dGVzIjogeyJJIjogeyJ0eXBlIjogIlNxdWFyZSIsICJhdHRyaWJ1dGVzIjogeyJhbXBsaXR1ZGUiOiAxLjAsICJkdXJhdGlvbiI6IDIwMDB9fSwgIlEiOiB7InR5cGUiOiAiU3F1YXJlIiwgImF0dHJpYnV0ZXMiOiB7ImFtcGxpdHVkZSI6IDAuMCwgImR1cmF0aW9uIjogMjAwMH19fX0sICJ3YWl0X3RpbWUiOiA0MH19LCB7InR5cGUiOiAiQWNxdWlyZSIsICJhdHRyaWJ1dGVzIjogeyJfdXVpZCI6IHsidHlwZSI6ICJVVUlEIiwgInV1aWQiOiAiM2Y2YmNhYjctOTJlOS00M2I4LTg5YjAtOTNiNDcxMDNjNDlhIn0sICJidXMiOiAicmVhZG91dF9xMF9idXMiLCAid2VpZ2h0cyI6IHsidHlwZSI6ICJJUVBhaXIiLCAiYXR0cmlidXRlcyI6IHsiSSI6IHsidHlwZSI6ICJTcXVhcmUiLCAiYXR0cmlidXRlcyI6IHsiYW1wbGl0dWRlIjogMS4wLCAiZHVyYXRpb24iOiAyMDAwfX0sICJRIjogeyJ0eXBlIjogIlNxdWFyZSIsICJhdHRyaWJ1dGVzIjogeyJhbXBsaXR1ZGUiOiAxLjAsICJkdXJhdGlvbiI6IDIwMDB9fX19LCAibmFtZSI6IG51bGx9fSwgeyJ0eXBlIjogIldhaXQiLCAiYXR0cmlidXRlcyI6IHsiX3V1aWQiOiB7InR5cGUiOiAiVVVJRCIsICJ1dWlkIjogIjMzNTQzMDdlLWU0OTUtNDNhMy1hODI1LTE5ZGEzZTcxMTA0ZSJ9LCAiYnVzIjogInJlYWRvdXRfcTBfYnVzIiwgImR1cmF0aW9uIjogMTAwMDB9fV19LCAidmFyaWFibGUiOiB7InR5cGUiOiAiRmxvYXRWYXJpYWJsZSIsICJhdHRyaWJ1dGVzIjogeyJfdXVpZCI6IHsidHlwZSI6ICJVVUlEIiwgInV1aWQiOiAiNjM1ZGY3Y2EtY2UzOC00ZDYyLTlmZWQtN2YxY2JhZjcxZTc5In0sICJfc291cmNlIjogeyJ0eXBlIjogIlZhbHVlU291cmNlIiwgImF0dHJpYnV0ZXMiOiB7InZhbHVlIjogIkZyZWUifX0sICJfdmFsdWUiOiBudWxsLCAiX2RvbWFpbiI6IHsidHlwZSI6ICJEb21haW4iLCAiYXR0cmlidXRlcyI6IHsidmFsdWUiOiAiVm9sdGFnZSJ9fX19LCAic3RhcnQiOiAwLjAsICJzdG9wIjogMS4wLCAic3RlcCI6IDAuMX19XX0sICJzaG90cyI6IDEwMDB9fV19fX0sICJfYnVzZXMiOiB7InR5cGUiOiAic2V0IiwgImVsZW1lbnRzIjogWyJyZWFkb3V0X3EwX2J1cyIsICJkcml2ZV9xMF9idXMiXX0sICJfdmFyaWFibGVzIjogeyJ0eXBlIjogImxpc3QiLCAiZWxlbWVudHMiOiBbeyJ0eXBlIjogIkZsb2F0VmFyaWFibGUiLCAiYXR0cmlidXRlcyI6IHsiX3V1aWQiOiB7InR5cGUiOiAiVVVJRCIsICJ1dWlkIjogIjYzNWRmN2NhLWNlMzgtNGQ2Mi05ZmVkLTdmMWNiYWY3MWU3OSJ9LCAiX3NvdXJjZSI6IHsidHlwZSI6ICJWYWx1ZVNvdXJjZSIsICJhdHRyaWJ1dGVzIjogeyJ2YWx1ZSI6ICJGcmVlIn19LCAiX3ZhbHVlIjogbnVsbCwgIl9kb21haW4iOiB7InR5cGUiOiAiRG9tYWluIiwgImF0dHJpYnV0ZXMiOiB7InZhbHVlIjogIlZvbHRhZ2UifX19fV19LCAiX2Jsb2NrX3N0YWNrIjogeyJ0eXBlIjogImRlcXVlIiwgImVsZW1lbnRzIjogW3sidHlwZSI6ICJCbG9jayIsICJhdHRyaWJ1dGVzIjogeyJfdXVpZCI6IHsidHlwZSI6ICJVVUlEIiwgInV1aWQiOiAiNmJjZWI0NTEtMGVlMS00NTdjLWExNTctYjJmMmQ1MzhmZmI1In0sICJlbGVtZW50cyI6IHsidHlwZSI6ICJsaXN0IiwgImVsZW1lbnRzIjogW3sidHlwZSI6ICJBdmVyYWdlIiwgImF0dHJpYnV0ZXMiOiB7Il91dWlkIjogeyJ0eXBlIjogIlVVSUQiLCAidXVpZCI6ICIyMDNjM2NlNi01Yzc5LTRkMGUtYjM2My04MmQ0ODQ4MGFiOTgifSwgImVsZW1lbnRzIjogeyJ0eXBlIjogImxpc3QiLCAiZWxlbWVudHMiOiBbeyJ0eXBlIjogIkZvckxvb3AiLCAiYXR0cmlidXRlcyI6IHsiX3V1aWQiOiB7InR5cGUiOiAiVVVJRCIsICJ1dWlkIjogImM4ZDY2MzM4LWM1NDktNDI3MC1iNDYwLTYwODZhNDkxNDgzMyJ9LCAiZWxlbWVudHMiOiB7InR5cGUiOiAibGlzdCIsICJlbGVtZW50cyI6IFt7InR5cGUiOiAiU2V0R2FpbiIsICJhdHRyaWJ1dGVzIjogeyJfdXVpZCI6IHsidHlwZSI6ICJVVUlEIiwgInV1aWQiOiAiZmRhZDIwMDgtYjg1Yi00YmI2LWIyMGItY2Y0NjZkMWRhZTU4In0sICJidXMiOiAiZHJpdmVfcTBfYnVzIiwgImdhaW4iOiB7InR5cGUiOiAiRmxvYXRWYXJpYWJsZSIsICJhdHRyaWJ1dGVzIjogeyJfdXVpZCI6IHsidHlwZSI6ICJVVUlEIiwgInV1aWQiOiAiNjM1ZGY3Y2EtY2UzOC00ZDYyLTlmZWQtN2YxY2JhZjcxZTc5In0sICJfc291cmNlIjogeyJ0eXBlIjogIlZhbHVlU291cmNlIiwgImF0dHJpYnV0ZXMiOiB7InZhbHVlIjogIkZyZWUifX0sICJfdmFsdWUiOiBudWxsLCAiX2RvbWFpbiI6IHsidHlwZSI6ICJEb21haW4iLCAiYXR0cmlidXRlcyI6IHsidmFsdWUiOiAiVm9sdGFnZSJ9fX19fX0sIHsidHlwZSI6ICJQbGF5IiwgImF0dHJpYnV0ZXMiOiB7Il91dWlkIjogeyJ0eXBlIjogIlVVSUQiLCAidXVpZCI6ICJhYmNhY2QxMS1lNGFhLTQyOWItYjYzYy0zYTI1MDliY2ExN2YifSwgImJ1cyI6ICJkcml2ZV9xMF9idXMiLCAid2F2ZWZvcm0iOiB7InR5cGUiOiAiSVFQYWlyIiwgImF0dHJpYnV0ZXMiOiB7IkkiOiB7InR5cGUiOiAiR2F1c3NpYW4iLCAiYXR0cmlidXRlcyI6IHsiYW1wbGl0dWRlIjogMS4wLCAiZHVyYXRpb24iOiA0MCwgIm51bV9zaWdtYXMiOiA0LjV9fSwgIlEiOiB7InR5cGUiOiAiRHJhZ0NvcnJlY3Rpb24iLCAiYXR0cmlidXRlcyI6IHsiZHJhZ19jb2VmZmljaWVudCI6IC0yLjAsICJ3YXZlZm9ybSI6IHsidHlwZSI6ICJHYXVzc2lhbiIsICJhdHRyaWJ1dGVzIjogeyJhbXBsaXR1ZGUiOiAxLjAsICJkdXJhdGlvbiI6IDQwLCAibnVtX3NpZ21hcyI6IDQuNX19fX19fSwgIndhaXRfdGltZSI6IG51bGx9fSwgeyJ0eXBlIjogIlN5bmMiLCAiYXR0cmlidXRlcyI6IHsiX3V1aWQiOiB7InR5cGUiOiAiVVVJRCIsICJ1dWlkIjogIjlkYWQyYWM2LWM5NTgtNGNkOS04NTMyLTJjMjMyYTUyZDM4NyJ9LCAiYnVzZXMiOiBudWxsfX0sIHsidHlwZSI6ICJQbGF5IiwgImF0dHJpYnV0ZXMiOiB7Il91dWlkIjogeyJ0eXBlIjogIlVVSUQiLCAidXVpZCI6ICI0ZTJhM2E3NS1iZGMxLTQxM2YtOGQ4NS02NzAzOTU4ZDM4NzUifSwgImJ1cyI6ICJyZWFkb3V0X3EwX2J1cyIsICJ3YXZlZm9ybSI6IHsidHlwZSI6ICJJUVBhaXIiLCAiYXR0cmlidXRlcyI6IHsiSSI6IHsidHlwZSI6ICJTcXVhcmUiLCAiYXR0cmlidXRlcyI6IHsiYW1wbGl0dWRlIjogMS4wLCAiZHVyYXRpb24iOiAyMDAwfX0sICJRIjogeyJ0eXBlIjogIlNxdWFyZSIsICJhdHRyaWJ1dGVzIjogeyJhbXBsaXR1ZGUiOiAwLjAsICJkdXJhdGlvbiI6IDIwMDB9fX19LCAid2FpdF90aW1lIjogNDB9fSwgeyJ0eXBlIjogIkFjcXVpcmUiLCAiYXR0cmlidXRlcyI6IHsiX3V1aWQiOiB7InR5cGUiOiAiVVVJRCIsICJ1dWlkIjogIjNmNmJjYWI3LTkyZTktNDNiOC04OWIwLTkzYjQ3MTAzYzQ5YSJ9LCAiYnVzIjogInJlYWRvdXRfcTBfYnVzIiwgIndlaWdodHMiOiB7InR5cGUiOiAiSVFQYWlyIiwgImF0dHJpYnV0ZXMiOiB7IkkiOiB7InR5cGUiOiAiU3F1YXJlIiwgImF0dHJpYnV0ZXMiOiB7ImFtcGxpdHVkZSI6IDEuMCwgImR1cmF0aW9uIjogMjAwMH19LCAiUSI6IHsidHlwZSI6ICJTcXVhcmUiLCAiYXR0cmlidXRlcyI6IHsiYW1wbGl0dWRlIjogMS4wLCAiZHVyYXRpb24iOiAyMDAwfX19fSwgIm5hbWUiOiBudWxsfX0sIHsidHlwZSI6ICJXYWl0IiwgImF0dHJpYnV0ZXMiOiB7Il91dWlkIjogeyJ0eXBlIjogIlVVSUQiLCAidXVpZCI6ICIzMzU0MzA3ZS1lNDk1LTQzYTMtYTgyNS0xOWRhM2U3MTEwNGUifSwgImJ1cyI6ICJyZWFkb3V0X3EwX2J1cyIsICJkdXJhdGlvbiI6IDEwMDAwfX1dfSwgInZhcmlhYmxlIjogeyJ0eXBlIjogIkZsb2F0VmFyaWFibGUiLCAiYXR0cmlidXRlcyI6IHsiX3V1aWQiOiB7InR5cGUiOiAiVVVJRCIsICJ1dWlkIjogIjYzNWRmN2NhLWNlMzgtNGQ2Mi05ZmVkLTdmMWNiYWY3MWU3OSJ9LCAiX3NvdXJjZSI6IHsidHlwZSI6ICJWYWx1ZVNvdXJjZSIsICJhdHRyaWJ1dGVzIjogeyJ2YWx1ZSI6ICJGcmVlIn19LCAiX3ZhbHVlIjogbnVsbCwgIl9kb21haW4iOiB7InR5cGUiOiAiRG9tYWluIiwgImF0dHJpYnV0ZXMiOiB7InZhbHVlIjogIlZvbHRhZ2UifX19fSwgInN0YXJ0IjogMC4wLCAic3RvcCI6IDEuMCwgInN0ZXAiOiAwLjF9fV19LCAic2hvdHMiOiAxMDAwfX1dfX19XX19fQ==",
        job_type="qprogram",
    )
    assert isinstance(job_result.data, dict)


def test_job_result_program_raises_error():
    """Test we are rising exceptions to inform correctly that PROGRAMS are not currently supported."""

    job_result = JobResult(job_id=0, http_response="WzAuMSwgMC4xLCAwLjEsIDAuMSwgMC4xXQ==", job_type="program")
    assert isinstance(job_result.data, str)
